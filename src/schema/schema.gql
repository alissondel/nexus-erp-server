# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthInput {
  email: String!
  password: String!
}

type AuthType {
  token: String!
  user: User!
}

type City {
  active: Boolean!
  createdAt: DateTime!
  createdUser: Int!
  deletedAt: DateTime
  deletedUser: Int
  id: Int!
  name: String!
  state: State!
  stateId: Int!
  updatedAt: DateTime
  updatedUser: Int
}

input CreateCityInput {
  active: Boolean = true
  createdAt: DateTime
  createdUser: Int
  name: String!
  stateId: Int!
}

input CreateStateInput {
  active: Boolean = true
  createdAt: DateTime
  createdUser: Int
  name: String!
  uf: String!
}

input CreateUserInput {
  active: Boolean = true
  cityId: Int!
  createdAt: DateTime
  createdUser: Int
  email: String!
  name: String!
  password: String
  phoneNumber: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FilterCityInput {
  active: Boolean
  createdAt: DateTime
  id: Int
  name: String
  order: OrderByFilterInput
  state: String
  stateId: Float
  updatedAt: DateTime
}

input FilterStateInput {
  active: Boolean
  createdAt: DateTime
  id: Int
  name: String
  order: OrderByFilterInput
  uf: String
  updatedAt: DateTime
}

input FilterUserInput {
  active: Boolean
  cityId: Float
  createdAt: DateTime
  email: String
  id: Int
  name: String
  order: OrderByFilterInput
  password: String
  phoneNumber: String
  typeUser: Float
  updatedAt: DateTime
}

type Mutation {
  authenticate(data: AuthInput!): AuthType!
  createAdminOrRoot(data: CreateUserInput!): User!
  createCity(data: CreateCityInput!): City!
  createState(data: CreateStateInput!): State!
  createUser(data: CreateUserInput!): User!
  deleteCity(id: Float!): City!
  deleteState(id: Float!): State!
  deleteUser(id: Float!): User!
  updateCity(data: UpdateCityInput!, id: Float!): City!
  updateState(data: UpdateStateInput!, id: Float!): State!
  updateUser(data: UpdateUserInput!, id: Float!): User!
  updateUserPassword(data: updatePasswordInput!): User!
}

input OrderByFilterInput {
  key: String! = "id"
  prefix: String
  value: String! = "ASC"
}

type PageInfo {
  count: Int!
  currentPage: Int!
  pagesCount: Int!
  perPage: Int!
}

type PaginatedCityResponse {
  items: [City!]!
  pagination: PageInfo!
}

type PaginatedStateResponse {
  items: [State!]!
  pagination: PageInfo!
}

type PaginatedUserResponse {
  items: [User!]!
  pagination: PageInfo!
}

type Query {
  cities(currentPage: Int = 1, filters: FilterCityInput!, perPage: Int = 10): PaginatedCityResponse!
  city(active: Boolean, id: Float!): City!
  state(active: Boolean, id: Float!): State!
  states(currentPage: Int = 1, filters: FilterStateInput!, perPage: Int = 10): PaginatedStateResponse!
  user(active: Boolean, id: Float!): User!
  users(currentPage: Int = 1, filters: FilterUserInput!, perPage: Int = 10): PaginatedUserResponse!
}

type State {
  active: Boolean!
  createdAt: DateTime!
  createdUser: Int!
  deletedAt: DateTime!
  deletedUser: Int
  id: Int!
  name: String!
  uf: String!
  updatedAt: DateTime!
  updatedUser: Int
}

input UpdateCityInput {
  name: String!
  stateId: Int!
  updatedAt: DateTime
  updatedUser: Int
}

input UpdateStateInput {
  name: String
  uf: String
  updatedAt: DateTime
  updatedUser: Int
}

input UpdateUserInput {
  cityId: Int!
  email: String!
  name: String
  phoneNumber: String
  updatedAt: DateTime
  updatedUser: Int
}

type User {
  active: Boolean!
  city: City!
  cityId: Int!
  createdAt: DateTime!
  createdUser: Int!
  deletedAt: DateTime!
  deletedUser: Int
  email: String!
  id: Int!
  name: String!
  password: String
  phoneNumber: String!
  typeUser: Float!
  updatedAt: DateTime!
  updatedUser: Int
}

input updatePasswordInput {
  confirmNewPassword: String!
  id: Int!
  newPassword: String!
  password: String!
}